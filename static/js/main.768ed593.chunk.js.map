{"version":3,"sources":["Timer.js","App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","palette","primary","blue","secondary","yellow","useStyles","makeStyles","root","m","margin","s","TimerControls","active","toggleActiveCallback","IconButton","onClick","TimerInput","addTimerCallback","useState","duration","setDuration","clickHandler","Container","TextField","label","onChange","e","target","value","onKeyUp","preventDefault","keyCode","Timer","timers","setTimers","setActive","useEffect","interval","setInterval","prevTimers","map","val","index","filter","length","clearInterval","classes","ThemeProvider","Card","className","Divider","concat","Box","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gYAoBMA,EAAQC,YAAe,CAC3BC,QAAS,CACPC,QAASC,IACTC,UAAWC,OAITC,EAAYC,YAAW,CAC3BC,KAAM,CACJ,YAAa,SAEfC,EAAG,CACDC,OAAQ,OACR,mBAAoB,SAEtBC,EAAG,CACDD,OAAQ,SAIZ,SAASE,EAAT,GAA0D,IAAjCC,EAAgC,EAAhCA,OAAQC,EAAwB,EAAxBA,qBAC/B,OACE,kBAACC,EAAA,EAAD,CAAYC,QAASF,GAClBD,EAAS,kBAAC,IAAD,MAAgB,kBAAC,IAAD,OAKhC,SAASI,EAAT,GAA2C,IAArBC,EAAoB,EAApBA,iBAAoB,EAERC,mBADR,IADgB,mBAEjCC,EAFiC,KAEvBC,EAFuB,KAIxC,SAASC,IACPJ,EAAiBE,GAGnB,OACE,kBAACG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,MAAM,OACNC,SAAU,SAACC,GAAD,OAAON,EAAYM,EAAEC,OAAOC,QACtCC,QAAS,SAACH,GACRA,EAAEI,iBACgB,KAAdJ,EAAEK,SAAgBV,OAG1B,kBAACP,EAAA,EAAD,CAAYC,QAASM,GACnB,kBAAC,IAAD,QA4DOW,MAtDf,WAAkB,IAAD,EACad,mBAAS,IADtB,mBACRe,EADQ,KACAC,EADA,OAEahB,oBAAS,GAFtB,mBAERN,EAFQ,KAEAuB,EAFA,KAYfC,qBAAU,WACR,IAAIC,EAAW,EAcf,OAZIzB,IACFyB,EAAWC,aAAY,WACrBJ,GAAU,SAACK,GAAD,OACRA,EACGC,KAAI,SAACC,EAAKC,GAAN,OAAkBA,EAAkBD,EAAVA,EAAM,KACpCE,QAAO,SAACF,GAAD,OAASA,GAAO,UAE3B,MAGDR,EAAOW,OAAS,GAAGT,GAAU,GAE1B,kBAAMU,cAAcR,MAC1B,CAACzB,EAAQqB,EAAOW,SAEnB,IAAME,EAAUzC,IAEhB,OACE,kBAAC0C,EAAA,EAAD,CAAejD,MAAOA,GACpB,kBAACkD,EAAA,EAAD,CAAMC,UAAWH,EAAQvC,MACvB,kBAACI,EAAD,CACEE,qBA5BR,WACEsB,GAAWvB,IA4BLA,OAAQA,EACRqC,UAAWH,EAAQtC,IAErB,kBAAC0C,EAAA,EAAD,MACA,kBAAClC,EAAD,CAAYC,iBArClB,SAAkBE,GAChBe,GAAU,SAACD,GAAD,OAAYA,EAAOkB,OAAOhC,OAoCQ8B,UAAWH,EAAQtC,IAC1DyB,EAAOW,OAAS,EAAI,kBAACM,EAAA,EAAD,MAAc,KAClCjB,EAAOO,KAAI,SAACrB,EAAUuB,GAAX,OACV,kBAACU,EAAA,EAAD,CAAKC,IAAKX,EAAOO,UAAWH,EAAQpC,GAClC,4BAAKS,EAAL,KACCuB,EAAQT,EAAOW,OAAS,EAAI,kBAACM,EAAA,EAAD,MAAa,YC1GvCI,MARf,WACE,OACE,yBAAKL,UAAU,OACX,kBAAC,EAAD,QCIYM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.768ed593.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Box,\r\n  Card,\r\n  TextField,\r\n  Container,\r\n  ThemeProvider,\r\n  createMuiTheme,\r\n  IconButton,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport AddAlarmIcon from \"@material-ui/icons/AddAlarm\";\r\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\r\nimport PauseIcon from \"@material-ui/icons/Pause\";\r\n\r\nimport { blue, yellow } from \"@material-ui/core/colors\";\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: blue,\r\n    secondary: yellow,\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    \"max-width\": \"400px\",\r\n  },\r\n  m: {\r\n    margin: \"20px\",\r\n    \"background-color\": \"black\",\r\n  },\r\n  s: {\r\n    margin: \"6px\",\r\n  },\r\n});\r\n\r\nfunction TimerControls({ active, toggleActiveCallback }) {\r\n  return (\r\n    <IconButton onClick={toggleActiveCallback}>\r\n      {active ? <PauseIcon /> : <PlayArrowIcon />}\r\n    </IconButton>\r\n  );\r\n}\r\n\r\nfunction TimerInput({ addTimerCallback }) {\r\n  const defaultDuration = 30;\r\n  const [duration, setDuration] = useState(defaultDuration);\r\n\r\n  function clickHandler() {\r\n    addTimerCallback(duration);\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TextField\r\n        label=\"Time\"\r\n        onChange={(e) => setDuration(e.target.value)}\r\n        onKeyUp={(e) => {\r\n          e.preventDefault();\r\n          if (e.keyCode === 13) clickHandler();\r\n        }}\r\n      />\r\n      <IconButton onClick={clickHandler}>\r\n        <AddAlarmIcon />\r\n      </IconButton>\r\n    </Container>\r\n  );\r\n}\r\n\r\nfunction Timer() {\r\n  const [timers, setTimers] = useState([]);\r\n  const [active, setActive] = useState(false);\r\n\r\n  function addTimer(duration) {\r\n    setTimers((timers) => timers.concat(duration));\r\n  }\r\n\r\n  function toggleTimer() {\r\n    setActive(!active);\r\n  }\r\n\r\n  useEffect(() => {\r\n    let interval = 0;\r\n\r\n    if (active) {\r\n      interval = setInterval(() => {\r\n        setTimers((prevTimers) =>\r\n          prevTimers\r\n            .map((val, index) => (!index ? val - 1 : val))\r\n            .filter((val) => val >= 0)\r\n        );\r\n      }, 1000);\r\n    }\r\n\r\n    if (timers.length < 1) setActive(false);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [active, timers.length]);\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Card className={classes.root}>\r\n        <TimerControls\r\n          toggleActiveCallback={toggleTimer}\r\n          active={active}\r\n          className={classes.m}\r\n        />\r\n        <Divider />\r\n        <TimerInput addTimerCallback={addTimer} className={classes.m} />\r\n        {timers.length > 0 ? <Divider /> : null}\r\n        {timers.map((duration, index) => (\r\n          <Box key={index} className={classes.s}>\r\n            <h1>{duration}s</h1>\r\n            {index < timers.length - 1 ? <Divider/> : null}\r\n          </Box>\r\n        ))}\r\n      </Card>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default Timer;\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nimport Timer from './Timer';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <Timer/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}