{"version":3,"sources":["Timer.js","App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","palette","primary","blue","secondary","yellow","useStyles","makeStyles","root","m","margin","s","TimerControls","props","IconButton","onClick","callback","active","TimerInput","Container","TextField","label","Timer","useState","timers","setTimers","setActive","useEffect","interval","setInterval","map","val","index","filter","length","clearInterval","classes","ThemeProvider","Card","className","Divider","concat","duration","Box","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gYAoBMA,EAAQC,YAAe,CAC3BC,QAAS,CACPC,QAASC,IACTC,UAAWC,OAITC,EAAYC,YAAW,CAC3BC,KAAM,CACJ,YAAa,SAEfC,EAAG,CACDC,OAAQ,OACR,mBAAoB,SAEtBC,EAAG,CACDD,OAAQ,SAIZ,SAASE,EAAcC,GACrB,OACE,kBAACC,EAAA,EAAD,CAAYC,QAASF,EAAMG,UACxBH,EAAMI,OAAS,kBAAC,IAAD,MAAgB,kBAAC,IAAD,OAKtC,SAASC,EAAWL,GAClB,OACE,kBAACM,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAWC,MAAM,SACjB,kBAACP,EAAA,EAAD,CAAYC,QAASF,EAAMG,UACzB,kBAAC,IAAD,QAyDOM,MAnDf,WAAkB,IAAD,EACaC,mBAAS,IADtB,mBACRC,EADQ,KACAC,EADA,OAEaF,oBAAS,GAFtB,mBAERN,EAFQ,KAEAS,EAFA,KAYfC,qBAAU,WACR,IAAIC,EAAW,EAaf,OAXIX,IACFW,EAAWC,aAAY,WACrBJ,GAAU,SAACD,GAAD,OACRA,EACGM,KAAI,SAACC,EAAKC,GAAN,OAAkBA,EAAkBD,EAAVA,EAAM,KACpCE,QAAO,SAACF,GAAD,OAASA,GAAO,UAE3B,MAEDP,EAAOU,OAAS,GAAGR,GAAU,GAE1B,WACLS,cAAcP,MAEf,CAACX,EAAQO,EAAOU,SAEnB,IAAME,EAAU9B,IAEhB,OACE,kBAAC+B,EAAA,EAAD,CAAetC,MAAOA,GACpB,kBAACuC,EAAA,EAAD,CAAMC,UAAWH,EAAQ5B,MACvB,kBAACI,EAAD,CAAeI,SA5BrB,WACEU,GAAWT,IA2B+BA,OAAQA,EAAQsB,UAAWH,EAAQ3B,IACzE,kBAAC+B,EAAA,EAAD,MACA,kBAACtB,EAAD,CAAYF,SAlClB,WACES,GAAU,SAACD,GAAD,OAAYA,EAAOiB,OAAO,QAiCAF,UAAWH,EAAQ3B,IACnD,kBAAC+B,EAAA,EAAD,MACChB,EAAOM,KAAI,SAACY,EAAUV,GAAX,OACV,kBAACW,EAAA,EAAD,CAAKC,IAAKZ,EAAOO,UAAWH,EAAQzB,GAClC,kBAACgC,EAAA,EAAD,KAAMD,EAAN,KACA,kBAACF,EAAA,EAAD,aCzFGK,MARf,WACE,OACE,yBAAKN,UAAU,OACX,kBAAC,EAAD,QCIYO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6352abb6.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Box,\r\n  Card,\r\n  TextField,\r\n  Container,\r\n  ThemeProvider,\r\n  createMuiTheme,\r\n  IconButton,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\n\r\nimport {makeStyles} from '@material-ui/core/styles';\r\n\r\nimport AddAlarmIcon from \"@material-ui/icons/AddAlarm\";\r\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\r\nimport PauseIcon from \"@material-ui/icons/Pause\";\r\n\r\nimport { blue, yellow } from \"@material-ui/core/colors\";\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: blue,\r\n    secondary: yellow,\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    'max-width': '400px' \r\n  },\r\n  m: {\r\n    margin: '20px',\r\n    'background-color': 'black'\r\n  },\r\n  s: {\r\n    margin: '6px'\r\n  }\r\n})\r\n\r\nfunction TimerControls(props) {\r\n  return (\r\n    <IconButton onClick={props.callback}>\r\n      {props.active ? <PauseIcon /> : <PlayArrowIcon />}\r\n    </IconButton>\r\n  );\r\n}\r\n\r\nfunction TimerInput(props) {\r\n  return (\r\n    <Container>\r\n      <TextField label=\"Time\" />\r\n      <IconButton onClick={props.callback}>\r\n        <AddAlarmIcon />\r\n      </IconButton>\r\n    </Container>\r\n  );\r\n}\r\n\r\nfunction Timer() {\r\n  const [timers, setTimers] = useState([]);\r\n  const [active, setActive] = useState(false);\r\n\r\n  function addTimer() {\r\n    setTimers((timers) => timers.concat(30));\r\n  }\r\n\r\n  function toggleTimer() {\r\n    setActive(!active);\r\n  }\r\n\r\n  useEffect(() => {\r\n    let interval = 0;\r\n\r\n    if (active)\r\n      interval = setInterval(() => {\r\n        setTimers((timers) =>\r\n          timers\r\n            .map((val, index) => (!index ? val - 1 : val))\r\n            .filter((val) => val >= 0)\r\n        );\r\n      }, 1000);\r\n\r\n    if (timers.length < 1) setActive(false);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [active, timers.length]);\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Card className={classes.root}>\r\n        <TimerControls callback={toggleTimer} active={active} className={classes.m}/>\r\n        <Divider />\r\n        <TimerInput callback={addTimer} className={classes.m}/>\r\n        <Divider />\r\n        {timers.map((duration, index) => (\r\n          <Box key={index} className={classes.s}>\r\n            <Box>{duration}s</Box>\r\n            <Divider />\r\n          </Box>\r\n        ))}\r\n      </Card>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default Timer;\r\n","import React from 'react';\nimport './App.css';\n\nimport Timer from './Timer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Timer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}